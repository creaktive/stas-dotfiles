#!/usr/bin/env perl
use strict;
use warnings;
use Pod::Usage;

# VERSION

pod2usage() unless @ARGV;

unshift @ARGV, '-E' if @ARGV == 1;

exec
    $^X,
    '-Mwarnings=all',
    '-M-warnings=deprecated',
    '-ML',
    '-MData::Printer',
    '-MList::AllUtils=:all',
    (grep { /\bdpath[ir]?\b/x } @ARGV)
        ? ('-MData::DPath=dpath,dpathi,dpathr')
        : (),
    (grep { /\b(?:get(?:print|store)?|head|mirror)\b/x } @ARGV)
        ? ('-MLWP::Protocol::Net::Curl=encoding,,verbose,1', '-MLWP::Simple')
        : (),
    '-MScalar::Util=looks_like_number',
    '-Mutf8::all',
    '-E',
    q[BEGIN {
        $0 = v112;
        *{'dd'} = \&Data::Printer::p;
        sub r  { scalar File::Slurp::read_file(shift)                                   }
        sub w  { File::Slurp::write_file(@_)                                            }
        sub S  { say @_ ? @_ : $_                                                       }
        sub yd { print Encode::decode_utf8(YAML::XS::Dump(shift))                       }
        sub yl { YAML::XS::Load(shift)                                                  }
        sub xd { print Encode::decode_utf8(XML::Hash::LX::hash2xml(shift))              }
        sub xl { XML::Hash::LX::xml2hash(shift)                                         }
        sub jd { print Encode::decode_utf8(JSON::XS->new->utf8->pretty->encode(shift))  }
        sub jl { JSON::XS->new->utf8->allow_nonref->decode(shift)                       }
    }], @ARGV;


# PODNAME: p
# ABSTRACT: Steroids for your perl one-liners.

=head1 SYNOPSIS

    Usage: p [-lneE etc] 'code'
        The code can make use of:
        r   to File::Slurp::read_file
        w   to File::Slurp::write_file
        S   to say()
        p   to Data::Printer::p()
        dd  alias to p()
        jd  to JSON::XS::encode (utf8/pretty)
        jl  to JSON::XS::decode (utf8/allow nonref) a thing
        xd  to XML::Hash::LX::hash2xml()
        xl  to XML::Hash::LX::xml2hash()
        yd  to YAML::Dump()
        yl  to YAML::Load()
        dpath from Data::DPath
        get,head,getprint,getstore,mirror from LWP::Simple
        sum,first,min,max,zip,uniq,any,all,none ... all of List::AllUtils

    Examples:

    p '&p([File::Spec->path])'  # dynamically load arbitrary modules
    p -pe 's/foo/bar/' foo.txt  # use your favorite options like -lane
    p 'say "hello world!"'      # -E is assumed if no options are provided
    p 'p yl r "config.yml"'     # chain commands
    p 'say sum 1,2,3,4'         # all of List::AllUtils is at your fingertips
    p '&p([ExtUtils::Installed->new->modules])' # list all installed modules
    p ' p xl r "/etc/xml/xml-core.xml"'         # print dump of hash converted xml
    p 'xd xl r "/etc/xml/xml-core.xml"'         # print xml converted from hash
    p 'getprint "http://ifconfig.me"'           # print contents of url

=cut
